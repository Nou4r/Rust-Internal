#pragma once
#include "hinclude.h"
#include "aimbot.h"
namespace Reflect {

	typedef bool(__fastcall* Reflect)(UINT seed, Vector3 Point, Vector3 Normal);
	inline Reflect Original_Reflect{};

	uintptr_t CanReflect;

	bool __fastcall ReflectProjectile(UINT seed, Vector3 Point, Vector3 Normal) {

		rust::BasePlayer* a1 = variables::local_player;
		rust::BasePlayer* a2 = aimbot::getBestPlayerByFov();
		std::cout << "Easy Hook";
		if (!(a1))
			return false;
		if (!(a2))
			return false;
		seed = variables::local_player->get_held_item()->seed();
		Point = a2->get_bone_position(BoneList::neck);
		if (Point == Vector3{ 0,0,0 })
			return false;
		Normal = a1->get_bone_position(BoneList::neck);
		if (Normal == Vector3{ 0,0,0 })
			return false;
		std::cout << "helo no crash hehwhw";
		return Original_Reflect(seed, Point, Normal);
	}
}


namespace SkinChanger {
	typedef void(__fastcall* SkinChange)(ULONG oldskinid, ULONG newskinid);
	inline SkinChange Original_SkinChance{};

	uintptr_t CanChance;

	void __fastcall WeaponSkin(ULONG oldskinid, ULONG newskinid) {
		auto Orig_Item_Skin = reinterpret_cast<void(*)(rust::BaseEntity*, rust::Item*)>(CanChance);

		rust::BasePlayer* a1 = variables::local_player;
		std::cout << "Easy Hook";
		if (!(a1))
			return;
		oldskinid = 0;
		newskinid = 12;
		return Original_SkinChance(oldskinid, newskinid);

		
	}
}

namespace Speed {
	typedef float(__fastcall* SpeedChanger)(float running, float ducking, float crawling);
	inline SpeedChanger Original_Speed{};

	uintptr_t Speed;

	float __fastcall SpeedHeck(float running, float ducking, float crawling)
	{
		rust::BasePlayer* a1 = variables::local_player;
		if (!(a1))
			return 0.0f;
		if (a1->get_movement()->ducking())
		{
			ducking = 5.0f;
		}
		if (a1->get_movement()->swimming())
		{
			running = 5.0f;
		}
		crawling = 4.5f;
		running = 2.8;
		return Original_Speed(running, ducking, crawling);
	}
}

